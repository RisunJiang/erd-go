// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x6a\xeb\x30\x10\x85\xf7\x79\x8a\x41\xeb\xd8\x37\x04\xee\xaa\x96\xa1\x8b\x16\x02\xc5\x29\xad\x57\xfd\xa1\xc8\xd1\xc4\x56\x3b\x91\x8c\x3c\x81\x06\xa1\x77\x2f\xb6\x53\x62\x67\x51\x2d\xa4\xe1\x68\xce\xc7\x19\x26\x84\x04\x34\xee\x8d\x45\x10\xda\xb1\x80\x24\xc6\x45\xed\x55\xdb\x40\x58\x00\x00\x8c\xf5\xeb\x50\xf7\xa7\x37\x98\x3d\xa4\xa5\x61\xc2\xf1\xbe\x65\xf6\xa6\x3a\x32\x76\x29\xa9\x0a\x69\x60\xfc\xf6\x0f\x8a\xcc\xb2\xfb\x6d\x51\xc2\xe3\x76\x53\x94\xc9\xf3\xe6\xe5\x4e\x8a\xf5\x4a\xe4\x21\xfc\xc5\x89\x31\xfb\xd7\xdb\xf2\x7c\x39\xc7\x7d\x1e\x3b\x96\x74\x25\x92\xdb\x49\x5e\xce\x72\xa2\xd5\xb3\x2c\x5e\xd9\x2f\x6d\xbc\x7c\x78\x1a\xa4\xf7\x9b\xe1\xb1\x4e\xe3\x64\xc0\x31\xb0\x78\x2b\xc4\x05\xd6\x35\xaa\x45\xd9\x92\x32\x96\xf1\x9b\xa7\x6e\xd4\xf5\xd4\xbd\x73\xe4\xbc\xac\xbd\x3a\xfd\x5f\x5d\xfc\x07\x63\x09\xad\x5c\x4f\x88\x7c\x22\x94\x5a\x75\x0d\xea\x29\x2e\x04\xc6\x43\x4b\x8a\xc7\x7d\x7c\x78\x24\xc5\xc6\xd9\x4e\x40\x7a\x9e\xe4\xba\x85\x55\x45\x78\xfe\x8f\x8b\x10\xd0\xea\x18\x7f\x02\x00\x00\xff\xff\xf5\x46\x51\x73\xd8\x01\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 472, mode: os.FileMode(420), modTime: time.Unix(1516190412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4a\xc3\x40\x10\x86\xef\x79\x8a\x61\x4f\x56\xcd\xaa\x67\x63\x41\x04\x4f\x12\xa1\xf4\x26\x22\x13\x76\xd2\x0e\xac\x5b\x4c\xc6\x83\x2c\xf3\xee\xd2\xa5\x8d\xd1\x64\xa1\xde\x86\x9f\x99\x6f\x32\x5f\x36\x46\x47\x2d\x07\x02\xe3\x76\xf2\xd6\x91\x47\xe1\x5d\xe8\x8d\x6a\x11\x63\x87\x61\x43\x60\x57\xc7\x54\xb5\x00\x88\xd1\x3e\x51\x2b\x6b\x6c\x3c\xd5\xf8\x4e\xaa\x50\x96\xfb\x74\xc5\x9b\xed\xaf\xf8\xa5\x00\xd8\xf7\x97\xc0\x2d\x9c\xd1\x07\xa4\xc1\x07\xec\x1c\x07\xf4\x2c\x5f\x60\xce\xcd\x02\xca\x84\x05\xd8\x12\x3a\x8f\x0d\xf9\xbb\xaa\x7a\x7c\xae\xd7\xcb\x6b\x6b\xeb\xea\x2a\x95\xcb\xcb\x81\x45\xbe\xa7\x3c\xf0\xc2\x2c\x72\xb8\x9b\x3c\x2e\xfb\x09\x87\x63\x47\x2b\x54\x67\x18\xc1\x0d\x88\xc3\xb9\x83\xb4\x7b\x91\x8e\x9b\x4f\xa1\xde\x26\xf2\xd0\xf8\x77\x4f\x6e\xe0\xc4\x85\x49\x47\xfa\x05\x59\xc1\x82\xec\xff\x2b\x78\x4a\xfc\x31\x3c\xe1\x9d\x60\x78\x32\x73\x7c\x38\xb3\x8a\x67\x0e\x7e\xbd\x2d\xc6\xc1\xa8\xfe\x0e\x00\x00\xff\xff\x8d\xd1\xef\xd3\xcb\x02\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 715, mode: os.FileMode(420), modTime: time.Unix(1516154099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x8a\xf2\x30\x14\xdd\xf7\x29\x2e\xc1\xe5\xa7\x55\xf8\x98\xc5\x4c\x12\xe8\x9f\x4e\xa1\xb4\x52\xb3\x1a\x91\xa1\xb5\x51\xca\x64\x5a\xd0\x38\x9b\x90\x77\x1f\x12\xdb\x5a\x65\x5c\xf5\xe6\xfe\x9c\x73\xee\xb9\x55\xaa\xe2\x87\xba\xe1\x80\xaa\x56\x7e\xca\xa2\x14\xfc\x8c\xb4\x76\x94\x3a\x15\xcd\x91\xc3\x44\x7e\xfd\x83\x89\x84\x57\x02\x33\x66\xab\x5a\x3b\x00\x4a\xcd\x58\x2d\x05\xd7\x1a\xb6\xa2\x28\xb9\x20\x18\x2f\xb3\x94\xc1\xd2\x0b\x22\x82\xde\xb9\xf8\xe1\xb2\xde\x17\x88\x3a\x00\x00\x98\x79\x7e\x12\xd9\x10\xc0\xcf\xf2\x30\xca\x09\x9a\x23\x08\xa2\x24\xe9\x9f\x0b\xd4\xd5\x4d\x72\xed\x85\x61\x9c\xae\x08\xfa\x3f\xce\x6e\xd6\x5e\x60\xb3\xf3\x3e\xab\xd4\x14\xea\x43\x27\xcd\x93\xf2\x54\x97\x17\xc9\xcf\xb3\xf2\xb8\x6f\x45\x7b\xb2\x5a\x2d\xe7\x2a\xc8\x92\x2c\x27\xc8\x08\x7f\xd6\x3b\x06\xe5\x4d\x05\xd3\x61\x9c\x76\x5f\xcc\xf2\x3e\x34\x8f\x90\x5e\x97\x5e\x67\x71\xca\xa6\x9b\xf8\x23\x22\x68\xf1\x82\x1e\x4d\x80\xb2\x15\x15\xa2\xd8\xa7\x37\xdb\xb0\xeb\x53\xec\x9a\x69\x8a\x5d\x16\x0e\x04\xee\x8d\xc1\xc8\xe8\x8e\x60\x6e\xb0\xb7\x37\x08\x5a\x71\xf9\x6e\xce\x83\xb2\x47\x45\xe0\x25\xf1\x2a\x25\x28\x89\x96\x0c\x5d\xe5\xdd\xb1\xda\xc4\x30\xd0\xdb\x77\x45\x1d\x79\x62\x6f\x3a\x32\xc0\xa2\xdb\x59\xd8\x2a\xf5\xa4\x5f\xeb\xdd\x5f\x04\xf7\x56\xda\x1d\x9f\xee\xcb\x9b\xaa\xeb\xc4\xae\xfd\x67\x4c\xb1\x03\xa5\xbb\x37\x67\x8c\x37\x8e\x7f\x03\x00\x00\xff\xff\x52\x9f\x45\x86\xc7\x02\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 711, mode: os.FileMode(420), modTime: time.Unix(1516242533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

