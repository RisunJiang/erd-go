// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\xcb\xd3\x30\x14\x80\xef\xfb\x2b\x42\xae\xbb\x98\x55\x87\x8a\xcb\xc0\x0b\x85\x81\x6e\xa2\xbb\xf2\x03\x49\x9b\xb3\x36\x9a\x25\x25\x39\x63\x60\xe8\x7f\x97\xb6\x1b\x4d\xe7\xf0\xed\x45\x39\x3c\xe7\x23\x4f\x4f\x13\xe3\x82\x28\x38\x6a\x0b\x84\x2a\x87\x94\x2c\xba\x2e\xab\xbd\x6c\x1b\x12\x33\x42\x08\x19\xe3\x6f\x43\xdc\x3f\x7d\x83\x3e\x12\x76\xd0\x68\x60\x7c\xbf\x45\xf4\xba\x3c\x23\x04\x66\x64\x09\x66\x98\x71\xab\x1f\x88\x58\xaf\xdf\xef\x77\x07\xf2\x69\xbf\xdd\x1d\x16\x5f\xb6\x5f\xdf\x09\x5a\x70\xba\x89\xf1\x7f\x73\xba\x6e\xfd\xac\x6f\xdb\x6c\xf2\xf9\xb8\x5f\xe7\x80\xc2\xdc\x41\xe3\x2a\x81\xf9\xcc\x13\xac\x9a\xb9\x58\xa7\x20\x40\x2b\x38\x5b\x4d\x85\x5e\xda\xdf\xff\xc0\x56\x2a\x41\x39\x2b\x72\xce\x0a\x3a\xe1\x93\xf4\xb5\xb6\x7d\x86\x27\xb4\x02\x5b\x81\x45\x2f\x11\x04\xfa\x33\x4c\x99\xd0\x1a\x6d\x21\x08\x3a\x06\x74\x7e\xaa\xd2\x5e\x7c\xf8\x3c\xa0\x1f\x6f\xb2\x9b\x60\xb2\xeb\x71\x77\xf4\xfb\x2e\x69\x3c\x3a\x8b\x41\xff\x01\xb1\x7c\xf1\xd0\xeb\x65\xce\x19\x5f\x25\x0d\x2d\xd8\x8b\x56\xd8\x88\x25\xe3\x89\x59\x23\x5b\x10\x1f\x3d\x54\xce\xab\x54\x01\x54\x9d\x2a\xf4\x8e\xa5\xc3\xe6\x91\x40\x31\x41\xe9\xbd\xbb\x0c\x94\xb3\xd7\x4f\x9d\x3d\x7c\x96\xb4\xb5\x01\xf1\xbc\xb8\xc3\x4a\x07\x94\xb6\x02\xb1\x64\xaf\x52\xad\x18\x11\x4e\xad\x91\x38\xde\xd3\x9f\x1e\x8c\x44\xed\x6c\xa0\x84\x5d\xff\xf0\x7d\x09\xca\xd2\xc0\x35\xdf\x65\x31\x82\x55\x5d\xf7\x37\x00\x00\xff\xff\xec\x09\x89\xb9\xf0\x02\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 752, mode: os.FileMode(420), modTime: time.Unix(1516326893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x4b\xfb\x30\x14\xc5\xdf\xfb\x29\x2e\x7d\xfa\xef\xef\x1a\xdd\xb3\xdd\x40\x04\x9f\xa4\xc2\xd8\x9b\x88\xdc\x9a\xdb\x2d\x10\x13\x4c\x23\x43\x42\xbe\xbb\xa4\x76\xb1\x9a\x74\xf8\x76\x39\xdc\xfc\xce\xe5\x9c\x38\xc7\xa9\x13\x8a\xa0\xe4\xda\x3e\x1b\x92\x68\x85\x56\x7d\xe9\x7d\xe1\x9c\x41\xb5\x27\x60\xdb\x93\xea\x7d\x01\xe0\x1c\xbb\xa7\xce\xee\xb0\x95\xd4\xe0\x2b\x79\x0f\x55\x15\xd4\xad\xd8\x1f\x7e\xc8\x8f\x05\x40\xd8\xaf\x40\x74\xf0\x8f\xde\xe0\x6b\xe5\x16\x0d\x17\x0a\xa5\xb0\x1f\x50\xfe\x2f\x17\x50\x0d\x5c\x00\x34\x46\x1f\x0f\x84\x7c\xad\x5f\x8c\x3e\x2e\xc3\x28\xb1\x25\xb9\xae\xeb\xbb\x87\x66\xb7\xb9\x62\xac\xa9\x2f\x87\x71\xb3\x8c\x70\x92\x3d\x9d\x71\xb8\x28\x17\x79\xbe\x25\x4a\x2d\x56\xf3\x16\xe9\x99\x4a\x2b\xd2\x59\xcc\x29\x8e\xc9\x25\xde\x67\xb8\x8a\x47\xec\x98\x53\x4c\xfb\xc6\x5a\x23\xda\x77\x4b\x3d\x1b\xd0\x71\x31\x31\x9a\x79\xf0\x47\xc3\x21\xb6\xd0\xe8\xf9\x5e\x2c\x0a\x39\xf6\x12\xc6\xd9\x5e\xf2\xb5\x24\xfc\x5f\xad\x7c\xd3\x43\x9c\x89\xc1\x6a\xd6\x20\xbd\x31\x96\x92\x50\xc6\x9f\x9b\xed\x24\x93\xd0\xd3\x75\x31\x15\x26\xf3\x67\x00\x00\x00\xff\xff\x93\x21\x06\x17\x35\x03\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 821, mode: os.FileMode(420), modTime: time.Unix(1516288980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x8b\xda\x40\x14\xc5\xdf\xfd\x14\x97\xcb\x3e\x6a\xe2\xb6\xb6\x0f\xed\x4c\x20\xff\xdc\x0d\xa4\x89\x64\x87\x16\xba\x2c\x25\x31\xa3\x84\x4e\x0d\xc4\xd9\x82\x4c\xe7\xbb\x97\x8c\x13\x6b\xac\x16\xea\x8b\x73\x8f\x77\xee\x3d\xfe\x4e\xa2\x54\xcd\x37\xcd\x8e\x03\xd6\xad\xfc\x26\xcb\x4a\xf0\x3d\x6a\x3d\x51\xaa\x2b\x77\x5b\x0e\x77\xf2\xfb\x14\xee\x24\x7c\xa0\xe0\x30\xf3\xab\xd6\x13\x00\xa5\x1c\xd6\x48\xc1\xb5\x86\x67\x51\x56\x5c\x50\x42\x98\x1f\xa4\xf1\x04\xcc\x27\xc8\x8b\x28\x2e\x28\xce\xd1\x0a\x61\x9c\xa6\x2b\x3f\x8a\x92\xec\xe1\x42\x7d\x5a\xf9\xe1\x51\x75\xde\x0d\xfa\x97\x24\x62\x8f\x14\xef\xdf\x2e\x06\xc5\x4f\x93\x87\x8c\x62\x18\x67\x2c\x2e\x06\xd1\xb3\xdf\x84\x15\xc3\xb1\x2f\xa2\x8b\x6e\xf8\x6c\xeb\x20\x67\x2c\xff\x84\xe7\xe3\x3d\xb2\xcc\x33\x06\xab\x3c\xc9\xd8\xec\x29\xf9\x1a\x53\xbc\x5f\x20\x2c\xfd\x30\xa6\xf8\xc8\xc5\x4f\x2e\x9b\x75\x09\x55\x2b\x6a\xf4\x48\xe0\xfd\xf9\xe3\xc4\x0d\x3c\xe2\xf6\xb7\x3d\xe2\xb2\xe8\xe4\xc5\x1d\xcc\x10\xd7\x10\x39\x16\x4a\xcd\xa0\xd9\x80\x13\xb6\xe2\xf5\xc7\x6e\x0f\x33\x83\x11\xe0\xd7\xb1\xf5\x9f\xec\xac\xfb\x34\x5e\xb2\xff\xc0\xb9\xb8\x02\x73\x30\xd9\xbb\xb1\xf9\xf6\xf1\xae\x4d\xbc\xd6\x9a\x35\x76\x9b\xaa\xf1\x71\x8d\xdb\x1b\x1c\xe1\x31\x68\x4e\x03\xc6\x00\x7c\x29\xbb\xa6\x7a\x95\x7c\xef\x98\xc7\xe7\xc4\xc3\x6e\x33\xc3\x8f\x21\xf8\x5d\x53\x0a\x48\x64\x29\x9a\x35\x8e\x17\xce\x11\xc2\x3c\xcd\x0b\x8a\xdb\x8e\x1f\xde\xcf\xd1\x83\x67\xa5\x6e\xac\xd0\xfa\xe5\x9a\x27\xbe\xab\x47\xcb\xaf\x67\x79\xea\xb5\x9d\x7f\x65\x6b\xc7\x8c\xc3\x36\x2f\xcc\x99\x8f\x6a\xbb\x6e\x45\xdb\xd9\x19\xd3\x4d\x23\x84\x11\x28\xf6\xdc\x6e\x35\xe3\xd4\xb4\xef\xe5\x41\x70\xda\xdf\xe1\xf5\xe5\x5a\x53\xbf\x7c\x9c\x9c\x4b\xe7\xe7\xdf\x01\x00\x00\xff\xff\xf5\xd1\xce\xba\xe6\x03\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 998, mode: os.FileMode(420), modTime: time.Unix(1516327129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

